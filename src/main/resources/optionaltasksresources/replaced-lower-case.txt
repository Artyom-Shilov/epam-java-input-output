PACKAGE COM.EPAM.TRAINING.ARTSIOM_SHYLAU.INPUTOUTPUT.OPTIONALTASKS.UTIL;

IMPORT JAVA.io.*;
IMPORT JAVA.NIO.FILE.FILES;
IMPORT JAVA.NIO.FILE.PATH;
IMPORT JAVA.NIO.FILE.STANDARDOPENOPTION;
IMPORT JAVA.UTIL.*;
IMPORT JAVA.UTIL.STREAM.COLLECTORS;

PUBLIC CLASS FILEOPERATOR {

    PRIVATE FILE CREATEFILEANDDIRECTORIESBYFILEPATH(STRING FILEPATH) THROWS IOEXCEPTION {
        FILE OUTPUTFILE = NEW FILE(FILEPATH);
        OUTPUTFILE.GETPARENTFILE().MKDIRS();
        OUTPUTFILE.CREATENEWFILE();
        RETURN OUTPUTFILE;
    }

    PRIVATE VOID WRITELISTOFSTRINGSINFILEWITHOUTNEWLINEINTHEEND(LIST<STRING> LINES, STRING OUTPUTFILEPATH)
            THROWS IOEXCEPTION {
        FILE OUTPUTFILE = CREATEFILEANDDIRECTORIESBYFILEPATH(OUTPUTFILEPATH);
        FILEWRITER WRITER = NEW FILEWRITER(OUTPUTFILE.TOPATH().TOSTRING());
        FOR (INT i = 0; i < LINES.SIZE(); i++) {
            if (i != LINES.SIZE() - 1) {
                WRITER.APPEND(LINES.GET(i)).APPEND(SYSTEM.LINESEPARATOR());
            } ELSE {
                WRITER.APPEND(LINES.GET(i));
            }
        }
        WRITER.CLOSE();
    }

    PUBLIC VOID CREATEFILEFILLEDWITHRANDOMINTEGERNUMBERS(STRING FILEPATH, INT AMOUNTOFNUMBERS, INT MINVALUE, INT MAXVALUE)
            THROWS IOEXCEPTION {
        FILE OUTPUTFILE = CREATEFILEANDDIRECTORIESBYFILEPATH(FILEPATH);
        FILES.WRITESTRING(OUTPUTFILE.TOPATH(), "");
        RANDOM RANDOM = NEW RANDOM();
        FOR (INT i = 0; i < AMOUNTOFNUMBERS; i++) {
            FILES.WRITESTRING(OUTPUTFILE.TOPATH(), STRING.VALUEOF(RANDOM.NEXTINT(MAXVALUE + 1 - MINVALUE) + MINVALUE),
                    STANDARDOPENOPTION.APPEND);
            if (i < AMOUNTOFNUMBERS - 1) {
                FILES.WRITESTRING(OUTPUTFILE.TOPATH(), "\n", STANDARDOPENOPTION.APPEND);
            }
        }
    }

    PUBLIC VOID WRITESORTEDLINESOFFILEFILLEDWITHINTEGERNUMBERSINASCENDINGORDERINANOTHERFILE(
            STRING INPUTFILEPATH, STRING OUTPUTFILEPATH) THROWS IOEXCEPTION {
        LIST<STRING> LINES = FILES.READALLLINES(PATH.of(INPUTFILEPATH))
                .STREAM()
                .MAP(INTEGER::VALUEOF)
                .SORTED()
                .MAP(STRING::VALUEOF)
                .COLLECT(COLLECTORS.TOLIST());
        WRITELISTOFSTRINGSINFILEWITHOUTNEWLINEINTHEEND(LINES, OUTPUTFILEPATH);
    }

    PUBLIC VOID WRITEPROGRAMTEXTWITHREPLACEDPUBLICMETHODSANDFIELDSBYPRIVATEINANOTHERFILE(
            STRING INPUTFILEPATH, STRING OUTPUTFILEPATH) THROWS IOEXCEPTION {
        LIST<STRING> LINES = FILES.READALLLINES(PATH.of(INPUTFILEPATH));
        FOR (INT i = 0; i < LINES.SIZE(); i++) {
            STRING LINE = LINES.GET(i);
            if (LINE.CONTAINS("PUBLIC ") && !LINE.CONTAINS("CLASS") && !LINE.CONTAINS("INTERFACE")
                    && !LINE.CONTAINS("ENUM")) {
                LINES.SET(i, LINE.REPLACE("PUBLIC ", "PRIVATE "));
            }
            WRITELISTOFSTRINGSINFILEWITHOUTNEWLINEINTHEEND(LINES, OUTPUTFILEPATH);
        }
    }

    PUBLIC VOID WRITEPROGRAMTEXTWITHLINESINREVERSEORDERINANOTHERFILE(
            STRING INPUTFILEPATH, STRING OUTPUTFILEPATH) THROWS IOEXCEPTION {
        LIST<STRING> LINES = FILES.READALLLINES(PATH.of(INPUTFILEPATH));
        STRINGBUILDER BUILDERFORWHOLENEWLINE = NEW STRINGBUILDER();
        STRINGBUILDER BUILDERFORREVERSEPARTOFLINE = NEW STRINGBUILDER();
        FOR (INT i = 0; i < LINES.SIZE(); i++) {
            STRING LINE = LINES.GET(i);
            BUILDERFORWHOLENEWLINE.APPEND(LINE);
            INT FIRSTNOTSPACECHARINLINEINDEX = 0;
            FOR (INT j = 0; j < LINE.LENGTH(); j++) {
                if (LINE.CHARAT(j) != ' ') {
                    FIRSTNOTSPACECHARINLINEINDEX = j;
                    BREAK;
                }
            }
            BUILDERFORREVERSEPARTOFLINE.APPEND(LINE.SUBSTRING(FIRSTNOTSPACECHARINLINEINDEX));
            BUILDERFORWHOLENEWLINE.REPLACE(FIRSTNOTSPACECHARINLINEINDEX, BUILDERFORWHOLENEWLINE.LENGTH(),
                    BUILDERFORREVERSEPARTOFLINE.REVERSE().TOSTRING());
            BUILDERFORREVERSEPARTOFLINE.SETLENGTH(0);
            LINES.SET(i, BUILDERFORWHOLENEWLINE.TOSTRING());
            BUILDERFORWHOLENEWLINE.SETLENGTH(0);
        }
        WRITELISTOFSTRINGSINFILEWITHOUTNEWLINEINTHEEND(LINES, OUTPUTFILEPATH);
    }

    PUBLIC VOID WRITEPROGRAMTEXTWITHREPLACEDLOWERCASECHARSBYUPPERCASEIFWORDLENGTHMORETHANTWOINANOTHERFILE
            (STRING INPUTFILEPATH, STRING OUTPUTFILEPATH) THROWS IOEXCEPTION {
        STRING CONTENT = FILES.READSTRING(PATH.of(INPUTFILEPATH));
        SET<STRING> FOUNDWORDS = NEW TREESET<>(((COMPARATOR<STRING>) (o1, o2) -> o2.LENGTH() - o1.LENGTH())
                .THENCOMPARING(STRING::COMPARETO));
        FOR (STRING WORD : CONTENT.SPLIT(("[^a-zA-Z0-9]"))) {
            if (WORD.LENGTH() > 2) {
                FOUNDWORDS.ADD(WORD);
            }
        }
        FOR (STRING WORD : FOUNDWORDS) {
            CONTENT = CONTENT.REPLACEALL(WORD, WORD.TOUPPERCASE(LOCALE.ROOT));
        }
        FILES.WRITE(CREATEFILEANDDIRECTORIESBYFILEPATH(OUTPUTFILEPATH).TOPATH(), CONTENT.GETBYTES());
    }
}


